# Etapa de construcción: utiliza Maven para compilar la aplicación
FROM maven:3.9.4-eclipse-temurin-17 AS builder

# Establece el directorio de trabajo
WORKDIR /build

# Copia el archivo de configuración de Maven
COPY rc-settings.xml settings.xml

# Configura variables de entorno para Maven y token de paquete
ARG PACKAGE_TOKEN
ENV PACKAGE_TOKEN=${PACKAGE_TOKEN}

# Reemplaza el token de configuración en settings.xml
RUN sed -i "s|GIT_TOKEN|$PACKAGE_TOKEN|g" settings.xml

RUN wget -O jmx_prometheus_javaagent.jar https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.20.0/jmx_prometheus_javaagent-0.20.0.jar

# Copia los archivos de proyecto
COPY . /build

# Argumento para obtener el nombre del POM de forma dinámica
ARG ENVIRONMENT=dev
ENV ENVIRONMENT ${ENVIRONMENT}

# Define argumentos para controlar el comportamiento y parametrizar la copia
ARG DOCKER_HUB=false
ARG ARTIFACT_VERSION=0.0.1-SNAPSHOT
# Lista de artefactos a copiar (separados por espacios)
ARG ARTIFACTS="share-dev audit-agent-dev security-dev"

RUN if [ "$DOCKER_HUB" = "false" ]; then \
      echo "Entorno local detectado, copiando artefactos locales..."; \
      for artifact in $ARTIFACTS; do \
          target_dir="$MAVEN_CONFIG/repository/com/kynsoft/finamer/$artifact/$ARTIFACT_VERSION"; \
          echo "Procesando artefacto: $artifact"; \
          mkdir -p "$target_dir" && \
          if [ -f libs/${artifact}-${ARTIFACT_VERSION}.jar ]; then \
              cp -v libs/${artifact}-${ARTIFACT_VERSION}.jar "$target_dir/"; \
          else \
              echo "❌ ERROR: No se encontró libs/${artifact}-${ARTIFACT_VERSION}.jar" && exit 1; \
          fi && \
          if [ -f libs/${artifact}-${ARTIFACT_VERSION}.pom ]; then \
              cp -v libs/${artifact}-${ARTIFACT_VERSION}.pom "$target_dir/"; \
          else \
              echo "⚠️  Advertencia: No se encontró libs/${artifact}-${ARTIFACT_VERSION}.pom"; \
          fi; \
      done; \
    fi

# Compila las dependencias offline y el paquete
RUN mvn dependency:go-offline -f pom.xml -s settings.xml -Denv=$ENVIRONMENT
RUN mvn clean package -DskipTests -f pom.xml -Denv=$ENVIRONMENT

# Etapa final: imagen ligera de distroless
FROM gcr.io/distroless/java17-debian11

# Establece la zona horaria
ENV TZ="America/Santo_Domingo"

# Copia el JAR generado desde la etapa de construcción
COPY --from=builder /build/target/payment-1.0.0.jar /app/payment-1.0.0.jar
COPY src/main/resources/EstadoCuenta.xlsx /app/resources/EstadoCuenta.xlsx

#Download dependencias for monitoring
COPY --from=builder /build/jmx_prometheus_javaagent.jar /app/jmx_prometheus_javaagent-0.20.0.jar
COPY jmx_exporter_config.yaml /app/jmx_exporter_config.yaml

# Expone el puerto que utiliza la aplicación
EXPOSE 8097
EXPOSE 9904

#Download dependencias for monitoring
COPY --from=builder /build/jmx_prometheus_javaagent.jar /app/jmx_prometheus_javaagent-0.20.0.jar
COPY jmx_exporter_config.yaml /app/jmx_exporter_config.yaml

# Comando de inicio de la aplicación
ENTRYPOINT ["java", "-XX:MaxRAMPercentage=75.0", "-javaagent:/app/jmx_prometheus_javaagent-0.20.0.jar=9904:/app/jmx_exporter_config.yaml", "-jar", "/app/payment-1.0.0.jar"]
