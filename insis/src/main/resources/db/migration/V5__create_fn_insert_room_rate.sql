DROP FUNCTION IF EXISTS public.fn_insert_room_rate(uuid, integer, character varying, double precision, double precision, date, date, integer, character varying, character varying, character varying, character varying, date, double precision, character varying, character varying, date, character varying, double precision, double precision, double precision, double precision, character varying, character varying, character varying, character varying, character varying, character varying, character varying, integer, integer, timestamp without time zone, uuid, uuid, uuid, character varying, uuid, uuid, uuid, uuid);

CREATE OR REPLACE FUNCTION public.fn_insert_room_rate(
	p_id uuid,
	p_adults integer,
	p_agency_code character varying,
	p_amount double precision,
	p_amount_payment_applied double precision,
	p_check_in_date date,
	p_check_out_date date,
	p_children integer,
	p_coupon_number character varying,
	p_first_name character varying,
	p_guest_name character varying,
	p_hash character varying,
	p_hotel_creation_date date,
	p_hotel_invoice_amount double precision,
	p_hotel_invoice_number character varying,
	p_invoice_folio_number character varying,
	p_invoice_date date,
	p_last_name character varying,
	p_original_amount double precision,
	p_quote double precision,
	p_rate_by_adult double precision,
	p_rate_by_child double precision,
	p_rate_plan_code character varying,
	p_remarks character varying,
	p_renewal_number character varying,
	p_reservation_code character varying,
	p_room_number character varying,
	p_room_type_code character varying,
	p_status character varying,
	p_stay_days integer,
	p_total_number_of_guest integer,
	p_updated_at timestamp without time zone,
	p_booking_id uuid,
	p_hotel_id uuid,
	p_invoice_id uuid,
	p_room_category_code character varying,
	p_agency_id uuid,
	p_rate_plan_id uuid,
	p_room_category_id uuid,
	p_room_type_id uuid)
    RETURNS TABLE(o_id uuid)
    LANGUAGE 'plpgsql'
AS $$
DECLARE
    v_id uuid := p_id;
BEGIN
	IF p_id IS NULL THEN
    	v_id := gen_random_uuid();
    	p_id := v_id;
	END IF;

    IF EXISTS (SELECT 1 FROM room_rate WHERE id = v_id) THEN
        UPDATE room_rate SET
			adults = p_adults,
			agency_code = p_agency_code,
			amount = p_amount,
			amount_payment_applied = p_amount_payment_applied,
			check_in_date = p_check_in_date,
			check_out_date = p_check_out_date,
			children = p_children,
			coupon_number = p_coupon_number,
			first_name = p_first_name,
			guest_name = p_guest_name,
			hash = p_hash,
			hotel_creation_date = p_hotel_creation_date,
			hotel_invoice_amount = p_hotel_invoice_amount,
			hotel_invoice_number = p_hotel_invoice_number,
			invoice_folio_number = p_invoice_folio_number,
			invoice_date = p_invoice_date,
			last_name = p_last_name,
			original_amount = p_original_amount,
			quote = p_quote,
			rate_by_adult = p_rate_by_adult,
			rate_by_child = p_rate_by_child,
			rate_plan_code = p_rate_plan_code,
			remarks = p_remarks,
			renewal_number = p_renewal_number,
			reservation_code = p_reservation_code,
			room_number = p_room_number,
			room_type_code = p_room_type_code,
			status = p_status,
			stay_days = p_stay_days,
			total_number_of_guest = p_total_number_of_guest,
			updated_at = p_updated_at,
			booking_id = p_booking_id,
			hotel_id = p_hotel_id,
			invoice_id = p_invoice_id,
			room_category_code = p_room_category_code,
			agency_id = p_agency_id,
			rate_plan_id = p_rate_plan_id,
			room_category_id = p_room_category_id,
			room_type_id = p_room_type_id
        WHERE id = v_id;
    ELSE
        INSERT INTO room_rate
		(
            id,
			adults,
			agency_code,
			amount,
			amount_payment_applied,
			check_in_date,
			check_out_date,
			children,
			coupon_number,
			created_at,
			first_name,
			guest_name,
			hash,
			hotel_creation_date,
			hotel_invoice_amount,
			hotel_invoice_number,
			invoice_folio_number,
			invoice_date,
			last_name,
			original_amount,
			quote,
			rate_by_adult,
			rate_by_child,
			rate_plan_code,
			remarks,
			renewal_number,
			reservation_code,
			room_number,
			room_type_code,
			status,
			stay_days,
			total_number_of_guest,
			updated_at,
			booking_id,
			hotel_id,
			invoice_id,
			room_category_code,
			agency_id,
			rate_plan_id,
			room_category_id,
			room_type_id
        )
		VALUES
		(
			v_id,
			p_adults,
			p_agency_code,
			p_amount,
			p_amount_payment_applied,
			p_check_in_date,
			p_check_out_date,
			p_children,
			p_coupon_number,
			CURRENT_TIMESTAMP(6),
			p_first_name,
			p_guest_name,
			p_hash,
			p_hotel_creation_date,
			p_hotel_invoice_amount,
			p_hotel_invoice_number,
			p_invoice_folio_number,
			p_invoice_date,
			p_last_name,
			p_original_amount,
			p_quote,
			p_rate_by_adult,
			p_rate_by_child,
			p_rate_plan_code,
			p_remarks,
			p_renewal_number,
			p_reservation_code,
			p_room_number,
			p_room_type_code,
			p_status,
			p_stay_days,
			p_total_number_of_guest,
			p_updated_at,
			p_booking_id,
			p_hotel_id,
			p_invoice_id,
			p_room_category_code,
			p_agency_id,
			p_rate_plan_id,
			p_room_category_id,
			p_room_type_id
        );
    END IF;

	o_id := v_id;
	RETURN NEXT;
END;
$$;