pipeline {
    
    agent any

    parameters {
        booleanParam(name: 'FORCE_BUILD', defaultValue: false, description: 'Forzar la ejecuci√≥n del pipeline sin verificar cambios')
    }
    
    environment {
        ORIGIN_BRANCH_NAME = "${env.GIT_BRANCH}"
        DOCKER_IMAGE_NAME = 'tailorw/erp-config:version'
        SRC = 'config'
        GIT_PACKAGE_TOKEN = credentials("GithubPackageToken")
        DOCKER_CREDENTIALS = 'Tailorw-DockerCredentials'
        NAMESPACE = 'finamer'
        K3S_CREDENTIALS = 'KubernetesCredential-env'
        YAML = 'config.yaml'
        DEPLOYMENT_NAME = 'config'
        URL_DEV = credentials("URL-K3S-dev")
        URL_QA = credentials("URL-K3S-qa")
    }
    
    triggers {
        githubPush()
    }
    
    stages {
        stage ('Check for a specific project...') {
            steps {
                echo 'Identifying project.....'
                script {
                    if (!params.FORCE_BUILD){
                        def folderPath = env.SRC
                        def changes = sh(script: 'git diff --name-only HEAD^ HEAD', returnStdout: true).trim().split('\n')
                        def changesInFolder = changes.findAll { it.startsWith(folderPath) }
                        if (changesInFolder) {
                            echo "Changes detected in folder: ${folderPath}"
                        } else {
                            echo "* * * * * * * * No changes detected in folder: ${folderPath} * * * * * * * *"
                            currentBuild.result = 'NOT_BUILT'
                            error('No changes detected in folder: ${folderPath}')
                        }
                    }
                }
            }
        }
        
        stage (''Initialize variables'') {
            steps {
                echo 'Initializing..*'
                script {   
                    def branch = env.ORIGIN_BRANCH_NAME.replace('origin/', '')
                    env.BRANCH_NAME = branch

                    def dockerImage = env.DOCKER_IMAGE_NAME.replace('version', env.BRANCH_NAME)
                    env.DOCKER_IMAGE = dockerImage

                    def k3sCredentials = env.K3S_CREDENTIALS.replace('env', env.BRANCH_NAME)
                    env.SERVER_K3S_CREDENTIALS = k3sCredentials

                    if(env.BRANCH_NAME == 'dev'){
                        env.SERVER_K3S_URL = env.URL_DEV
                    }
                    if(env.BRANCH_NAME == 'qa'){
                        env.SERVER_K3S_URL = env.URL_QA
                    }
                }
            }
        }
 
        stage ('Create docker image'){
            steps {
                dir("${SRC}"){
                    sh 'docker build -t $DOCKER_IMAGE --build-arg PACKAGE_TOKEN=$GIT_PACKAGE_TOKEN --build-arg POM_NAME=pom.xml .'
                    withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS}", url: "") {
                        sh 'docker push $DOCKER_IMAGE'
                    }
                }
            }
        }

        stage ('Publish to Kubernetes') {
            steps {
                withKubeConfig(credentialsId: "${SERVER_K3S_CREDENTIALS}", namespace: "${NAMESPACE}", restrictKubeConfigAccess: false, serverUrl: "${SERVER_K3S_URL}") {
                    //sh 'kubectl apply -f kubernetes-config/deployments/$YAML'
                    sh 'kubectl rollout restart deploy $DEPLOYMENT_NAME'
                }
            }
        }
    }
}
